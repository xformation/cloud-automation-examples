{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template RDS_MySQL_With_Read_Replica: The create a highly-available, RDS DBInstance with a read replica.",
    "Parameters": {
        "ProductName": {
            "Description": "The Product Name, that we tag with every resource , so that we can track resources for products",
            "Type": "String"
        },
        "EnvironmentName": {
            "Description": "An environment name that will be prefixed to resource names, also every resource we tag with env",
            "Type": "String"
        },
        "VPC": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Choose which VPC the security groups should be deployed to"
        },
        "PrivateSubnets": {
            "Description": "Choose which private subnets this ECS cluster should be deployed to",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "DBName": {
            "Default": "mybb",
            "Description": "The database name",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBUser": {
            "NoEcho": "true",
            "Description": "The database admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "The database admin account password",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]+",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "The size of the database (Gb)",
            "Type": "Number",
            "MinValue": "5",
            "MaxValue": "1024",
            "ConstraintDescription": "must be between 5 and 1024Gb."
        },
        "DBInstanceClass": {
            "Description": "The database instance type",
            "Type": "String",
            "Default": "db.m1.small",
            "AllowedValues": [
                "db.t1.micro",
                "db.m1.small",
                "db.m1.medium",
                "db.m1.large",
                "db.m1.xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.m3.medium",
                "db.m3.large",
                "db.m3.xlarge",
                "db.m3.2xlarge",
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.m2.xlarge",
                "db.m2.2xlarge",
                "db.m2.4xlarge",
                "db.cr1.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "must select a valid database instance type."
        },
        "EC2SecurityGroup": {
            "Description": "The EC2 security group that contains instances that need access to the database",
            "Default": "default",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9\\-]+",
            "ConstraintDescription": "must be a valid security group name."
        },
        "JumpboxSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup::Id",
            "Description": "The security group that grants access to EFS"
        },
        "MultiAZ": {
            "Description": "Multi-AZ master database",
            "Type": "String",
            "Default": "false",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be true or false."
        }
    },
    "Conditions": {
        "Is-EC2-VPC": {
            "Fn::Or": [{
                    "Fn::Equals": [{
                            "Ref": "AWS::Region"
                        },
                        "eu-central-1"
                    ]
                },
                {
                    "Fn::Equals": [{
                            "Ref": "AWS::Region"
                        },
                        "cn-north-1"
                    ]
                },
                {
                    "Fn::Equals": [{
                            "Ref": "AWS::Region"
                        },
                        "us-east-1"
                    ]
                }
            ]
        },
        "Is-EC2-Classic": {
            "Fn::Not": [{
                "Condition": "Is-EC2-VPC"
            }]
        }
    },
    "Resources": {
        "DBEC2SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "Is-EC2-VPC",
            "Properties": {
                "GroupDescription": "Open database for access",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [{
                    "IpProtocol": "tcp",
                    "FromPort": "3306",
                    "ToPort": "3306",
                    "SourceSecurityGroupId": {
                        "Ref": "JumpboxSecurityGroup"
                    }
                }]
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::RDS::DBSecurityGroup",
            "Condition": "Is-EC2-Classic",
            "Properties": {
                "DBSecurityGroupIngress": [{
                    "EC2SecurityGroupName": {
                        "Ref": "JumpboxSecurityGroup"
                    }
                }],
                "GroupDescription": "database access"
            }
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "DBSubnetGroup",
                "SubnetIds": {
                    "Ref": "PrivateSubnets"
                }
            }
        },
        "MasterDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": {
                    "Ref": "DBName"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "Engine": "MySQL",
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MultiAZ": {
                    "Ref": "MultiAZ"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": {
                        "Fn::Sub": "${ProductName}/${EnvironmentName} Master Database"
                    }
                }],
                "VPCSecurityGroups": {
                    "Fn::If": [
                        "Is-EC2-VPC", [{
                            "Fn::GetAtt": [
                                "DBEC2SecurityGroup",
                                "GroupId"
                            ]
                        }],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "DBSecurityGroups": {
                    "Fn::If": [
                        "Is-EC2-Classic", [{
                            "Ref": "DBSecurityGroup"
                        }],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            },
            "DeletionPolicy": "Snapshot"
        },
        "ReplicaDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "SourceDBInstanceIdentifier": {
                    "Ref": "MasterDB"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "Tags": [{
                    "Key": "Name",
                    "Value": "Read Replica Database"
                }]
            }
        }
    },
    "Outputs": {
        "EC2Platform": {
            "Description": "Platform in which this stack is deployed",
            "Value": {
                "Fn::If": [
                    "Is-EC2-VPC",
                    "EC2-VPC",
                    "EC2-Classic"
                ]
            }
        },
        "MasterHosturl": {
            "Description": "Master Host uri",
            "Value": {
                "Fn::GetAtt": [
                    "MasterDB",
                    "Endpoint.Address"
                ]
            }
        },
        "MasterJDBCConnectionString": {
            "Description": "JDBC connection string for the master database",
            "Value": {
                "Fn::Join": [
                    "", [
                        "jdbc:mysql://",
                        {
                            "Fn::GetAtt": [
                                "MasterDB",
                                "Endpoint.Address"
                            ]
                        },
                        ":",
                        {
                            "Fn::GetAtt": [
                                "MasterDB",
                                "Endpoint.Port"
                            ]
                        },
                        "/",
                        {
                            "Ref": "DBName"
                        }
                    ]
                ]
            }
        },
        "ReplicaJDBCConnectionString": {
            "Description": "JDBC connection string for the replica database",
            "Value": {
                "Fn::Join": [
                    "", [
                        "jdbc:mysql://",
                        {
                            "Fn::GetAtt": [
                                "ReplicaDB",
                                "Endpoint.Address"
                            ]
                        },
                        ":",
                        {
                            "Fn::GetAtt": [
                                "ReplicaDB",
                                "Endpoint.Port"
                            ]
                        },
                        "/",
                        {
                            "Ref": "DBName"
                        }
                    ]
                ]
            }
        }
    }
}